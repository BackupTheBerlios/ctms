{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1031\deflangfe1031{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f28\froman\fcharset238\fprq2 Times New Roman CE;}{\f29\froman\fcharset204\fprq2 Times New Roman Cyr;}
{\f31\froman\fcharset161\fprq2 Times New Roman Greek;}{\f32\froman\fcharset162\fprq2 Times New Roman Tur;}{\f33\froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f34\froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\f35\froman\fcharset186\fprq2 Times New Roman Baltic;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;
\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{
\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs24\lang3079\langfe1031\cgrid\langnp3079\langfenp1031 \snext0 Normal;}{\*\cs10 \additive Default Paragraph Font;}}{\info{\title \'dcbersetzung: otaku}{\author wekl}
{\operator wekl}{\creatim\yr2005\mo1\dy12\hr13\min46}{\revtim\yr2005\mo1\dy12\hr13\min46}{\version2}{\edmins0}{\nofpages8}{\nofwords2375}{\nofchars13542}{\*\company wekl}{\nofcharsws16630}{\vern8249}}
\paperw11906\paperh16838\margl1417\margr1417\margt1417\margb1134 \deftab708\widowctrl\ftnbj\aenddoc\hyphhotz425\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\formshade\horzdoc\dgmargin\dghspace180\dgvspace180\dghorigin1417\dgvorigin1417\dghshow1
\dgvshow1\jexpand\viewkind1\viewscale117\viewzk2\pgbrdrhead\pgbrdrfoot\splytwnine\ftnlytwnine\htmautsp\nolnhtadjtbl\useltbaln\alntblind\lytcalctblwd\lyttblrtgr\lnbrkrule \fet0\sectd 
\linex0\headery708\footery708\colsx708\endnhere\sectlinegrid360\sectdefaultcl {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang
{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7
\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain 
\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs24\lang3079\langfe1031\cgrid\langnp3079\langfenp1031 {\'dcbersetzung: otaku
\par Originaltext: prettypoly
\par Stand: 29.12.1999 
\par 
\par Anmerkung des \'dcbersetzers:
\par Es gibt mit Sicherheit Leute, deren Englisch besser ist als meines. Von daher sind Hinweise auf (grobe) \'dcbersetzungsfehler o.\'e4. nat\'fcrlich gerne willkommen. Ich habe versucht, die Anleitung von prettypoly nicht wortw\'f6rtlich zu \'fcbersetzen, da
\'df klingt sonst alles so gestelzt :-)
\par Diese Version der HOWTO geht auch noch davon aus, da\'df man im Notfall auch ein paar Brocken Englisch versteht, um sich auf der BerliOS-Homepage zurechtzufinden. Sp\'e4
ter (wenn die Entwicklung bei SF mal etwas langsamer voranschreitet) werde ich diese Anleitung auch noch ein wenig erweitern. Vielleicht findet sich bis dahin ja auch jemand, der sich die M\'fche macht und eine deutsche Bedienungsanleitung f\'fc
r SF schreibt...
\par Man m\'f6ge mir Fl\'fcchtigkeitsfehler bitte nachsehen, da ich diese \'dcbersetzung spontan mitten in der Nacht geschrieben habe. Da kann sich schon mal der eine oder andere Vertipper einschleichen... :-) 
\par 
\par 
\par Vorwort
\par 
\par Hallo BerliOS-Neulinge!
\par 
\par Ich habe diese Anleitung geschrieben, um die Einrichtung eines neuen Projektes und die ersten Schritte bei BerliOS zu vereinfachen. Das ganze ist noch unvollst\'e4ndig und wird (hoffentlich) mit BerliOS mitwachsen.
\par 
\par Die folgende Situation d\'fcrfte auf die meisten Programmierer zutreffen:
\par Es ist ein Verzeichnis vorhanden, in dem der geschriebene Code liegt, vielleicht sogar ein aktuelles CVS repository. Die Features von BerliOS sollen genutzt werden, um das Projekt effizient weiterzuentwickeln, der \'d6ffentlichkeit vor
zustellen, vielleicht ein paar Helfer zu finden und nat\'fcrlich auch neue Benutzer. Ich gehe im folgenden daher einfach mal von dieser Situation aus. Also los... 
\par 
\par \'dcberblick
\par 
\par Die folgende Liste zeigt, was zum Einrichten eines neuen Projektes bei BerliOS gemacht werden mu\'df. Die Erkl\'e4rung dazu kommt gleich. 
\par Als neuer User bei BerliOS anmelden
\par Mit diesem Account einloggen und das neue Projekt anmelden
\par Gruppen- und Projektinformationen anpassen
\par CVS repository mit dem aktuellen Schnappschu\'df des Quellcodes einrichten
\par Webseiten f\'fcr das Projekt auf den Webserver laden
\par Mailinglisten anlegen
\par ggf. mit CVS vertraut machen und mit der Arbeit loslegen (bzw. weitermachen)!
\par 
\par ... au\'dferdem k\'f6nnte man noch folgendes brauchen: 
\par Ein Filemodul freigeben, damit man sich den Fortschritt des Projekts ansehen kann
\par BerliOS "Site Documentation" und das Hilfe-Forum durchlesen
\par 
\par An die Arbeit...
\par 
\par 1. Als neuer User bei BerliOS anmelden
\par 
\par Dazu mu\'df man auf der BerliOS-Entwickler-Homepage die Option "New User via SSL" anklicken. Damit der neue Account eingerichtet werden kann, werden einige pers\'f6nliche Daten abgefragt. Hat man das hinter sich gebracht, kann man sich ab jetzt immer \'a8
ber die Option "Login via SSL" anmelden.
\par 
\par Nach dem Login befindet man sich auf seiner pers\'f6nlichen Seite. Hier wird 
beispielsweise aufgelistet, an welchen Projekten man teilnimmt. Am linken Rand dieser Seite findet man einige Optionen, von denen uns vor allem "Register New Project" interessiert.
\par 
\par 2. Das neue Projekt anmelden
\par 
\par Nun mu\'df man sich durch eine Reihe Seiten durcharbeiten und die gew\'fcnschten Informationen angeben. Das ganze ist eigentlich recht verst\'e4ndlich geschrieben und einfach zu handhaben, daher gehe ich auf die einzelnen Angaben hier nicht weiter ein.

\par 
\par Wenn man alle Angaben gemacht hat, schickt man die Beschreibung des Projekt an das BerliOS-Team. Das Projekt wird dann begutachtet und \'fcberpr\'fcft, ob es den Zielen von BerliOS entspricht. Keine Sorge, ich habe bis jetzt nicht geh\'f6rt, da\'df
 ein Projekt abgelehnt wurde... wenn es unter einer OpenSource-Lizenz steht und frei verf\'fcgbar ist, sollte es klappen.
\par 
\par Nun mu\'df man ein wenig warten. In der Regel bekommt man innerhalb von 24 Stunden eine Mail mit dem Hinweis, da\'df das Projekt eingerichtet wurde. Wenn man sich nun wieder einloggt, findet man am unteren Ende seiner pers\'f6
nlichen Seite einen Link zum Verwaltungsbereich des neuen Projekts.
\par 
\par 3. Gruppen- und Projektinformationen anpassen
\par 
\par Hat man den Link auf seiner pers\'f6nlichen Seite angeklickt, kommt man also zum Verwaltungsbereich des neuen Projektes. Hier kann man zahlreiche Einstellungen vornehmen.
\par 
\par Bis jetzt hat mal also folgendes: 
\par eine Website unter http://Projektname.berlios.de
\par ein CVS repository unter cvs.berlios.de:/cvsroot/Projektname
\par einen anonymous FTP-Zugang unter Projektname.berlios.de:/pub/Projektname
\par und Zugriff auf einen Mailinglisten-Server
\par 
\par Als erstes sollte man eine Beschreibung des neuen Projektes angeben. Dazu klickt man auf "Project Admin", dann auf "Edit Group Public Information and Categorization". Hier werden die gew\'fcnschten Informationen in die
 entsprechenden Felder eingegeben. Die Beschreibung und die Zielplattform(en) werden in der Software Map angezeigt, in der alle Projekte bestimmten Kategorien zugeordnet und beschrieben werden. Ein Link zur Software Map ist am linken Rand oben zu finden.

\par 
\par Die n\'e4chste Frage, die interessiert, ist: gibt es weitere Entwickler, die an diesem Projekt mitarbeiten? Wenn ja, dann m\'fcssen sie sich alle bei BerliOS wie unter 1. beschrieben anmelden und Ihnen die Usernamen mitteilen. Sie k\'f6
nnen dann die Namen in die Liste der Entwickler aufnehmen und ihnen Schreibzugriff auf den CVS-Server und die Website geben. Dazu w\'e4hlt man im Verwaltungsbereich des Projektes "Add Group Member" und gibt die entsprechenden Namen ein.
\par 
\par Der Rest der Einstellungen im Verwaltungsbereich wird sp\'e4ter interessant. Nun sollte man erstmal etwas Code bereitstellen...
\par 
\par 4. CVS repository mit dem aktuellen Schnappschu\'df des Quellcodes einrichten
\par 
\par Wenn man mit CVS (wie ich) noch keine Erfahrung hat, braucht man ein bisschen Eingew\'f6hnungszeit. Den Neulingen m\'f6chte ich kurz beschreiben, was CVS \'fcberhaupt macht:
\par 
\par CVS f\'fchrt Buch \'fcber die Ver\'e4nderungen, die am Sourcecode vorgenommen wurden, zusammen mit einer Beschreibung dessen, was ver\'e4ndert wurde. Man kann sich zu jeder Zeit jede vorangegangene Version jeder Datei im repository ansehen. Durch CVS k
\'f6nnen mehrere Entwickler zur gleichen Zeit an der gleichen Datei arbeiten und ihre \'c4nderungen zusammenf\'fchren. Wenn zwei \'c4nderungen sich gegenseitig beeinflussen, werden die Entwickler darauf hingewiesen und sichergestellt, da\'df
 der Konflikt behoben wird, bevor die neue Version der Datei im repository aufgenommen wird.
\par 
\par Das ist eine sch\'f6ne Sache, an die man sich zwar erst ein wenig gew\'f6hnen mu\'df, die man aber bald sch\'e4tzen wird. Im Wesentlichen besteht der Entwicklungszyklus aus:
\par Man importiert den kompletten Sourcecode ins repository; anschlie\'dfend checkt jeder Entwickler eine Arbeitskopie aus dem Entwicklungsbaum aus. 
\par Nun arbeitet jeder Entwickler in seiner gewohnten Umgebung am Programm. Sobald ein neues Feature fertig ist, aktualisiert man zun\'e4chst die lokale Kopie, um auf dem laufenden zu sein und schreibt die ver\'e4nderten Files zur\'fc
ck in den Entwicklungsbaum. 
\par Sollten beim zur\'fcckschreiben der Ver\'e4nderungen irgendwelche Konflikte auftauchen, wird man darauf hingewiesen und mu\'df anschlie\'dfend manuell entsprechende \'c4nderungen vornehmen. In den Dateien werden die ver\'e4
nderten Bereiche mit ">>>>>" hervorgehoben und beide Versionen angezeigt. Hier l\'f6scht man entweder einfach die alte Version oder pa\'dft den Bereich an, damit er wie gew\'fcnscht arbeitet. Wenn alle Konflikte beseitigt sind, geht man wieder zur\'fc
ck zu Punkt 2 und setzt die Arbeit fort. 
\par 
\par Gut. Nun zu den Details, wie man den eigenen Source-Baum auf den CVS-Server von BerliOS l\'e4dt. Als erstes sollte man sich die "Site Documentation" zum Thema CVS ansehen. Will man mehr wissen, ist der Griff zum 180 Seiten starken (und frei verf\'fc
gbaren) CVS-Handbuch angesagt. Dann geht man wie folgt vor:
\par 
\par SSH und CVS f\'fcr das benutzte Betriebssystem besorgen. F\'fcr die Kombination Linux und bash gibt man nun ein:
\par }{\lang2057\langfe1031\langnp2057 export CVS_RSH=ssh
\par }{export CVSROOT=Username@cvs.berlios.de:/cvsroot/Projektname
\par 
\par 
\par Mit der ersten Zeile sagt man CVS, da\'df es mit Hilfe von SSH die Verbindung zum repository aufnehmen soll. Das wird aus Sicherheitsgr\'fcnden so gemacht
. Die zweite Zeile teilt CVS mit, wo das repository genau zu finden ist. Die kursiven Teile (Username und Projektname) m\'fcssen entsprechend angepa\'dft werden!
\par 
\par Oft wird man nun den Sourcecode aus einem Verzeichnis-Baum in den CVS-Server importieren wollen. Dazu wechselt man in das Verzeichnis, da\'df \'fcbertragen werden soll, und gibt folgende Zeile ein:
\par }{\lang2057\langfe1031\langnp2057 cvs import Modulname vendor start 
\par 
\par }{Modulname ist der Name, unter dem das repository angesprochen werden soll. Wenn alles klappt, wird man nun nach seinem BerliOS User-Pa\'dfwort gefragt. Anschlie\'dfend wird das Verzeichnis in den CVS-Server importiert, was ggf. ein Weilchen dauern kann.

\par 
\par Jetzt legt man ein Backup des "alten" Codes an, den man gerade auf den CVS-Server kopiert hat. In Zukunft arbeitet man nicht mehr mit dieser Version, sondern mit einer frisch ausgecheckten CVS-Version. Die erh\'e4lt man mit
\par cvs checkout Modulname 
\par 
\par Dadurch bekommt man eine Arbeitskopie des Sources in f\'fcr CVS verdaulicher Form. Man sollte auf keinen Fall vergessen, da\'df jede neue oder gel\'f6schte Datei bzw. Verzeichnis CVS bekanntgegeben werden mu\'df
. Weitere Informationen dazu gibts im oben genannten Buch.
\par 
\par 5. Webseiten f\'fcr das Projekt auf den Webserver laden
\par 
\par Ich gehe davon aus, da\'df bereits ein paar Seiten zum Projekt existieren, die nun auch auf BerliOS zur Verf\'fc
gung stehen sollen, damit man einen Eindruck von Ihrem Projekt gewinnen kann. Sollten Sie noch keine Seiten erstellt haben und auch nicht wissen, wie Sie das am besten anstellen, dann ist SelfHTML von Stefan M\'fcnz die richtige Adresse f\'fcr Sie.
\par 
\par Um auf dem Projektaccount zu arbeiten, loggt man sich per SSH auf BerliOS ein, z.B. mit
\par }{\lang2057\langfe1031\langnp2057 ssh -l Username shell.berlios.de 
\par 
\par }{Anschlie\'dfend findet man sich im eigenem Home-Verzeichnis wieder. Von hier aus werden alle Projektdateien im Verzeichnis /home/
groups/Projektname abgelegt. Dort sind alle Webseiten im Verzeichnis htdocs untergebracht. Bisher befindet sich in diesem Verzeichnis nur eine Datei index.php, die besagt, da\'df bisher noch keine Webseiten zur Verf\'fcgung stehen.
\par 
\par Die Webseiten werden mit dem Kommando scp \'fcbertragen, da\'df mit ssh ausgeliefert wird. Es wird folgenderma\'dfen benutzt:
\par scp lokale_Dateien_zum_\'fcbertragen Username@shell.berlios.de:/home/groups/Projektname/htdocs 
\par 
\par Ich empfehle Ihnen, die Dateien mit gzip zu packen und mit scp zu \'fcbertragen. Loggen Sie sich anschlie\'dfend mit ssh auf BerliOS ein und entpacken Sie das Archiv mit gunzip.
\par 
\par Sie fragen Sich vielleicht, was Sie auf Ihre Webseiten schreiben sollen. Neben einer Beschreibung des Projekt k\'f6nnten Sie folgendes unterbringen:
\par ein Link auf die BerliOS-Projektseite
\par Links zu den Mailinglisten (die wir gleich anlegen)
\par ein BerliOS-Icon und einen Zugriffsz\'e4hler; Informationen dazu gibts bei der "Site Documentation" von BerliOS
\par ein Link zum Webinterface des CVS-Servers unter http://cvs.berlios.de/cgi-bin/cvsweb.cgi/?cvsroot=Projektname
\par einige f\'fcr Ihr Projekt spezifische Informationen, wie CVS benutzt werden kann/soll
\par 
\par Das sind nat\'fcrlich nur einige Anregungen. Lassen Sie Ihre Fantasie spielen und versuchen Sie sich vorzustellen, was Besucher Ihrer Seiten interessieren k\'f6nnte.
\par 
\par 6. Mailinglisten anlegen
\par 
\par Auch, wenn sich bei einem Projekt noch nicht viel tut oder nur ein einzelner Entwickler daran arbeitet, sollte man in die Zukunft denken. Ich empfehle, drei Standardlisten f\'fcr jedes Projekt anzulegen. Eine devel-Liste f\'fc
r Entwickler, eine users-Liste f\'fcr die Benutzer und eine announce-Liste, auf der neue Versionen angek\'fcndigt werden.
\par 
\par Die Listen k\'f6nnen im Verwaltungsbereich des Projektes mit der Option "Mailing List Admin" angelegt werden. Das sollte keine Probleme bereiten, daher gehe ich darauf nicht weiter ein.
\par 
\par 7. Mit CVS vertraut machen
\par 
\par Hier sind die wichtigsten Kommandos, die man eigentlich st\'e4ndig braucht. Alles weitere mu\'df man im schon genannten Handbuch nachschlagen.
\par 
\par Die lokale Arbeitskopie des Sources mit der aktuellen Version auf dem Server zu synchronisieren:
\par cvs -z3 update -Pd 
\par 
\par (dazu mu\'df man CVSROOT und CVS_RSH wie oben beschrieben eingestellt haben).
\par 
\par Die \'c4nderungen an einer Datei auf den CVS-Server einspielen: 
\par cvs commit -m "Beschreibung der Ver\'e4nderungen." Dateiname 
\par 
\par Eine neue Datei in das CVS repository aufnehmen:
\par cvs add Dateiname
\par cvs commit -m "Dateiname hinzugef\'fcgt" Dateiname 
\par 
\par ... und nun kanns losgehen!
\par 
\par \page CVS Dokumentation 
\par Originaltext: SourceForge Crew
\par \'dcbersetzung: Uwe Hermann
\par Stand: 3.2.2000 
\par 
\par Das hier ist nur eine Anleitung f\'fcr die grundlegendsten Dinge, sollte aber f\'fcr den Anfang reichen. 
\par 
\par Alle Entwickler mit Read/Write-Rechten werden SSH(Secure Shell) benutzen. Der SSH(2.x) Client muss auf deinem lokalen Rechner verf\'fcgbar sein. 
\par Die Umgebungsvariable CVS_RSH muss den Pfad zu ssh enthalten. Dies kann man auf den meisten Linux-systemen(mit bash) folgenderma\'dfen erreichen: 
\par 
\par    }{\lang2057\langfe1031\langnp2057 export CVS_RSH=ssh
\par   
\par 
\par }{F\'fcr anonymen CVS-Zugang wird CVS pserver verwendet und kein SSH ben\'f6tigt. 
\par 
\par Wenn du eine 'permission denied'-Meldung bekommst, ohne dass du nach einem Passwort gefragt worden bist, hast du die CVS_RSH Umgebungsvariable nicht richtig gesetzt oder ssh ist auf deinem System nicht verf\'fcgbar. Das solltest du zuerst pr\'fc
fen, bevor du ein Passwort-Problem vermutest. 
\par 
\par Wie du deinen Quellcode ins repository importierst 
\par 
\par Auf deiner lokalen Maschine wechselst du in das Verzeichnis dessen Dateien und Unterverzeichnisse du importieren m\'f6chstest. Alles was jetzt im aktuellen Verzeichnis und in allen Unterverzeichnissen ist wird ins repository importiert werden. 
\par 
\par Tippe folgendes ein, um den Code zu importieren:
\par 
\par 
\par    }{\lang2057\langfe1031\langnp2057 cvs -dloginname@cvs.berlios.de:/cvsroot/deinprojekt import modulname vendor start
\par   
\par 
\par }{Du musst nat\'fcrlich 'loginname' durch deinen BerliOS Login-Namen, 'deinprojekt' durch den Unix-Namen deines Projektes, und 'modulname' durch den Namen des neuen CVS-Moduls ersetzen. 
\par 
\par Wie man einen Quellcode checkout mit SSH durchf\'fchrt 
\par 
\par Tippe folgendes ein, wobei du nat\'fcrlich wieder 'loginname', 'deinprojekt' und 'modulename' ersetzt: 
\par 
\par    }{\lang2057\langfe1031\langnp2057 cvs -dloginname@cvs.berlios.de:/cvsroot/deinprojekt co modulname 
\par   
\par 
\par }{Nach dem ersten checkout kannst du in dieses Verzeichnis wechseln und CVS-Kommandos ohne den -d Parameter ausf\'fchren, zum Beispiel: 
\par 
\par    cvs update
\par    cvs commit -m "Kommentare f\'fcr dieses commit"
\par    cvs add datei.c 
\par   
\par 
\par Wie man einen anonymen Quellcode checkout durchf\'fchrt 
\par 
\par Tippe folgendes ein, wobei du nat\'fcrlich wieder 'loginname', 'deinprojekt' und 'modulname' ersetzt: 
\par 
\par    }{\lang1036\langfe1031\langnp1036 cvs -d:pserver:anonymous@cvs.berlios.de:/cvsroot/deinprojekt login
\par   
\par 
\par }{Nachdem du dich nun als 'anonymous' eingeloggt hast, tippe folgendes: 
\par 
\par    }{\lang2057\langfe1031\langnp2057 cvs -d:pserver:anonymous@cvs.berlios.de:/cvsroot/deinprojekt co modulname 
\par   
\par 
\par }{Nach dem ersten checkout kannst du in dieses Verzeichnis wechseln und CVS-Kommandos ohne den -d Parameter ausf\'fchren, zum Beispiel: 
\par 
\par    cvs update
\par   
\par 
\par Wie man CVS benutzt wenn man auf shell.berlios.de eingeloggt ist 
\par 
\par Tippe folgendes ein, wobei du nat\'fcrlich wieder 'loginname' und 'deinprojekt' ersetzt: 
\par 
\par    }{\lang1036\langfe1031\langnp1036 cvs -dloginname@cvs:/cvsroot/deinprojekt login
\par   
\par 
\par }{Lies die CVS/SSH FAQ f\'fcr n\'e4here Informationen. 
\par 
\par Wie man einen schon existierenden CVS-tree importiert 
\par 
\par Diese Aufgabe muss von der BerliOS-crew manuell erledigt werden. Gehe wie folgt vor: 
\par erzeuge ein tar/gzip deines kompletten CVS-trees
\par stelle sicher, dass du dein CVSROOT Verzeichnis mit in das Archiv packst, wenn es Informationen enth\'e4lt, die du behalten m\'f6chtest. Wenn du dir nicht sicher bist, pack es sicherheitshalber mit ins tar/gzip. 
\par Sende eine mail an berlios-admin@mail.berlios.de und bitte die Admins dort, das tar/gzip in das CVS repository deines Projektes einzuspielen. Stelle jedoch sicher, dass du folgende Informationen in deiner Mail angibst: 
\par Den exakten Namen deines Projektes oder die URL der Homepage, z.B. http://developer.berlios.de/project/?group_id=1695 
\par Die FTP- oder HTTP- Adresse deiner tar/gzip Datei, wenn du sie nicht als attachment mitgeschickt hast. Pr\'fcfe allerdings vorher ob man die Datei auch wirklich per FTP/HTTP downloaden kann! 
\par Deinen BerliOS Login-Namen
\par Deine eMail-Adresse
\par Du wirst eine eMail von den BerliOS Admins erhalten, sobald der CVS-tree zur Benutzung bereit steht. 
\par 
\par Wie du deinen CVS-tree downloaden kannst 
\par 
\par T\'e4glich erstellte tarballs deines kompletten CVS-repository's sind auf http://cvs.berlios.de/cvstarballs/projektname-cvsroot.tar.gz f\'fcr Backup- oder Mirroring-Zwecke erh\'e4ltlich. 'projektname' muss nat\'fc
rlich durch den Unix-Namen deines Projektes ersetzt werden. 
\par 
\par Weitere CVS-Dokumentation 
\par BerliOS CVS/SSH FAQ 
\par Das CVS Buch
\par CVS Dokumentation auf www.loria.fr
\par }}